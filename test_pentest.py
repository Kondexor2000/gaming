import time
import subprocess
import requests
from zapv2 import ZAPv2

# Konfiguracja ZAP i aplikacji Django
zap_url = 'http://localhost:8080'  # Adres lokalnego serwera ZAP
target_url = 'http://localhost:8000'  # Adres aplikacji Django
zap = ZAPv2(proxies={'http': zap_url, 'https': zap_url})

# Funkcja do uruchamiania serwera Django
def start_django_server():
    print("Uruchamianie serwera Django...")
    server_process = subprocess.Popen(
        ["python", "manage.py", "runserver"],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    time.sleep(5)  # Czekanie na pełne uruchomienie serwera
    
    # Sprawdzenie, czy serwer Django działa
    try:
        response = requests.get(target_url)
        if response.status_code == 200:
            print("Serwer Django uruchomiony.\n")
        else:
            print("Serwer Django nie uruchomił się poprawnie.")
            server_process.terminate()
            return None
    except requests.exceptions.RequestException as e:
        print(f"Błąd w połączeniu z serwerem Django: {e}")
        server_process.terminate()
        return None
    
    return server_process

# Funkcja do zatrzymania serwera Django
def stop_django_server(server_process):
    print("Zatrzymywanie serwera Django...")
    server_process.terminate()  # Zatrzymanie serwera Django
    server_process.wait()
    print("Serwer Django zatrzymany.\n")

# Funkcja do uruchomienia skanowania przy użyciu OWASP ZAP
def zap_scan():
    print(f'Rozpoczynam skanowanie na {target_url}')
    zap.urlopen(target_url)

    # Spiderowanie aplikacji
    print('Spidering aplikacji')
    scan_id = zap.spider.scan(target_url)  # Uzyskaj ID skanowania
    while int(zap.spider.status(scan_id)) < 100:
        print(f"Spider progress: {zap.spider.status(scan_id)}%")
        time.sleep(2)
    print('Spidering zakończone.')

    # Aktywne skanowanie aplikacji
    print('Rozpoczynam skanowanie aktywne')
    scan_id = zap.ascan.scan(target_url)  # Uzyskaj ID skanowania
    while int(zap.ascan.status(scan_id)) < 100:
        print(f"Active scan progress: {zap.ascan.status(scan_id)}%")
        time.sleep(5)
    print('Skanowanie aktywne zakończone.')

    # Pobieranie wyników skanowania
    print('Pobieranie wyników skanowania...')
    vulnerabilities = zap.core.alerts(baseurl=target_url)
    for vulnerability in vulnerabilities:
        print(f"Nazwa: {vulnerability['alert']}")
        print(f"Opis: {vulnerability['description']}")
        print(f"Zalecenie: {vulnerability['solution']}")
        print('---')

    print('Skanowanie ZAP zakończone.\n')

# Funkcja do testowania podatności SQL Injection
def test_sql_injection():
    print('Test SQL Injection')
    url = f"{target_url}/endpoint"  # Zastąp "/endpoint" właściwym endpointem
    payload = "' OR '1'='1"  # Przykładowa wartość do SQL Injection
    try:
        response = requests.post(url, data={'input_field': payload})
        if "unexpected" in response.text or response.status_code == 500:
            print("SQL Injection znaleziony!")
        else:
            print("SQL Injection nie wykryty.")
    except requests.exceptions.RequestException as e:
        print(f"Błąd podczas testowania SQL Injection: {e}")
    print('---\n')

# Funkcja do testowania podatności XSS
def test_xss():
    print('Test XSS')
    url = f"{target_url}/endpoint"  # Zastąp "/endpoint" właściwym endpointem
    payload = "<script>alert('XSS');</script>"
    try:
        response = requests.post(url, data={'input_field': payload})
        if payload in response.text:
            print("XSS znaleziony!")
        else:
            print("XSS nie wykryty.")
    except requests.exceptions.RequestException as e:
        print(f"Błąd podczas testowania XSS: {e}")
    print('---\n')

# Funkcja do testowania podatności CSRF
def test_csrf():
    print('Test CSRF')
    url = f"{target_url}/protected_endpoint"  # Zastąp "/protected_endpoint" właściwym chronionym endpointem
    try:
        response = requests.post(url, data={'important_data': 'value'}, headers={'Referer': target_url, 'X-CSRFToken': 'your_csrf_token_here'})
        if response.status_code == 403:
            print("CSRF zabezpieczony!")
        else:
            print("CSRF potencjalnie narażony.")
    except requests.exceptions.RequestException as e:
        print(f"Błąd podczas testowania CSRF: {e}")
    print('---\n')

# Główna funkcja uruchamiająca testy
def main():
    # Uruchomienie serwera Django
    server_process = start_django_server()

    if server_process is not None:  # Sprawdź, czy serwer uruchomił się poprawnie
        try:
            # Uruchomienie skanowania ZAP
            zap_scan()

            # Testy manualne dla SQL Injection, XSS, i CSRF
            test_sql_injection()
            test_xss()
            test_csrf()
        finally:
            # Zatrzymanie serwera Django po zakończeniu testów
            stop_django_server(server_process)

# Uruchomienie głównej funkcji
if __name__ == "__main__":
    main()